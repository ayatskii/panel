# Generated by Django 4.2.7 on 2025-10-19 08:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("monolithic", "Monolithic - Fixed Structure"),
                            ("sectional", "Sectional - Modular Components"),
                        ],
                        default="sectional",
                        help_text="Monolithic: fixed structure, Sectional: customizable modules",
                        max_length=20,
                    ),
                ),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                (
                    "html_content",
                    models.TextField(
                        help_text="Main HTML structure with variable placeholders"
                    ),
                ),
                (
                    "css_content",
                    models.TextField(help_text="CSS styling for the template"),
                ),
                (
                    "js_content",
                    models.TextField(blank=True, help_text="JavaScript functionality"),
                ),
                (
                    "css_output_type",
                    models.CharField(
                        choices=[
                            ("inline", "Inline within <style> tags"),
                            ("external", "External stylesheet reference"),
                            ("async", "Async loading"),
                            ("path_only", "Path-only reference"),
                        ],
                        default="external",
                        max_length=20,
                    ),
                ),
                (
                    "js_output_type",
                    models.CharField(
                        choices=[
                            ("inline", "Inline script"),
                            ("external", "External file reference"),
                            ("defer", "Defer loading"),
                            ("async", "Async loading"),
                            ("path_only", "Path-only reference"),
                        ],
                        default="defer",
                        max_length=20,
                    ),
                ),
                (
                    "menu_html",
                    models.TextField(
                        blank=True,
                        help_text="Navigation menu structure with sample menu items",
                    ),
                ),
                (
                    "footer_menu_html",
                    models.TextField(
                        blank=True, help_text="Footer navigation structure"
                    ),
                ),
                (
                    "faq_block_html",
                    models.TextField(blank=True, help_text="FAQ section template"),
                ),
                (
                    "available_blocks",
                    models.JSONField(
                        default=list,
                        help_text="List of available block types: hero, article, cta, etc.",
                    ),
                ),
                (
                    "css_framework",
                    models.CharField(
                        choices=[
                            ("tailwind", "Tailwind CSS"),
                            ("bootstrap", "Bootstrap"),
                            ("custom", "Custom CSS"),
                        ],
                        default="custom",
                        max_length=100,
                    ),
                ),
                (
                    "supports_color_customization",
                    models.BooleanField(
                        default=True, help_text="Allow color scheme customization"
                    ),
                ),
                (
                    "color_variables",
                    models.JSONField(
                        default=dict,
                        help_text="CSS color variables: primary, secondary, accent, etc.",
                    ),
                ),
                (
                    "supports_page_speed",
                    models.BooleanField(
                        default=True,
                        help_text="Convert img tags to picture tags with WebP",
                    ),
                ),
                (
                    "logo_svg",
                    models.FileField(
                        blank=True,
                        help_text="Template logo in SVG format",
                        upload_to="templates/logos/",
                        validators=[
                            django.core.validators.FileExtensionValidator(["svg"])
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Template",
                "verbose_name_plural": "Templates",
                "db_table": "templates",
            },
        ),
        migrations.CreateModel(
            name="TemplateVariable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Variable name without brackets: title, brand_name, etc.",
                        max_length=100,
                    ),
                ),
                (
                    "variable_type",
                    models.CharField(
                        choices=[
                            ("meta", "Meta Information"),
                            ("brand", "Brand Information"),
                            ("content", "Content Area"),
                            ("style", "Styling Variable"),
                            ("script", "Script Variable"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "default_value",
                    models.TextField(
                        blank=True, help_text="Default value if not provided"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of variable usage"
                    ),
                ),
                ("is_required", models.BooleanField(default=False)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variables",
                        to="templates.template",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Variable",
                "verbose_name_plural": "Template Variables",
                "db_table": "template_variables",
            },
        ),
        migrations.CreateModel(
            name="TemplateSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "section_type",
                    models.CharField(
                        choices=[
                            ("header", "Header"),
                            ("menu", "Menu"),
                            ("hero", "Hero Section"),
                            ("content", "Content Area"),
                            ("sidebar", "Sidebar"),
                            ("footer", "Footer"),
                            ("footer_menu", "Footer Menu"),
                            ("custom", "Custom Section"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "html_content",
                    models.TextField(help_text="HTML structure for this section"),
                ),
                (
                    "css_content",
                    models.TextField(
                        blank=True, help_text="CSS specific to this section"
                    ),
                ),
                ("order_index", models.IntegerField(default=0)),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="Must be included in all sites using this template",
                    ),
                ),
                (
                    "is_customizable",
                    models.BooleanField(
                        default=True, help_text="Can be modified by users"
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sections",
                        to="templates.template",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Section",
                "verbose_name_plural": "Template Sections",
                "db_table": "template_sections",
                "ordering": ["order_index"],
            },
        ),
        migrations.CreateModel(
            name="TemplateFootprint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "cms_type",
                    models.CharField(
                        choices=[
                            ("wordpress", "WordPress"),
                            ("joomla", "Joomla"),
                            ("drupal", "Drupal"),
                            ("custom", "Custom CMS"),
                            ("none", "No CMS (Static)"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "theme_path",
                    models.CharField(
                        default="wp-content/themes/{{theme_name}}",
                        help_text="Template path structure with variables",
                        max_length=255,
                    ),
                ),
                (
                    "assets_path",
                    models.CharField(
                        default="assets",
                        help_text="Assets folder path relative to theme",
                        max_length=255,
                    ),
                ),
                (
                    "images_path",
                    models.CharField(
                        default="assets/images",
                        help_text="Images folder path",
                        max_length=255,
                    ),
                ),
                (
                    "css_path",
                    models.CharField(
                        default="assets/css", help_text="CSS files path", max_length=255
                    ),
                ),
                (
                    "js_path",
                    models.CharField(
                        default="assets/js",
                        help_text="JavaScript files path",
                        max_length=255,
                    ),
                ),
                (
                    "generate_php_files",
                    models.BooleanField(
                        default=False,
                        help_text="Generate PHP files like wp-login.php, wp-footer.php",
                    ),
                ),
                (
                    "php_files_config",
                    models.JSONField(
                        default=dict,
                        help_text="PHP files to generate: {filename: template_content}",
                    ),
                ),
                (
                    "path_variables",
                    models.JSONField(
                        default=dict,
                        help_text="Variables for path customization: theme_name, domain, etc.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="footprints",
                        to="templates.template",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Footprint",
                "verbose_name_plural": "Template Footprints",
                "db_table": "template_footprints",
            },
        ),
        migrations.CreateModel(
            name="TemplateAsset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("logo", "Logo (SVG)"),
                            ("favicon", "Favicon (SVG)"),
                            ("image", "Image"),
                            ("font", "Font File"),
                            ("icon", "Icon"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(upload_to="templates/assets/")),
                (
                    "file_path_variable",
                    models.CharField(
                        help_text="Variable name used in template: logo_url, favicon_url, etc.",
                        max_length=100,
                    ),
                ),
                (
                    "auto_generate_formats",
                    models.BooleanField(
                        default=False,
                        help_text="Auto-generate PNG and ICO for SVG favicons",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assets",
                        to="templates.template",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Asset",
                "verbose_name_plural": "Template Assets",
                "db_table": "template_assets",
            },
        ),
        migrations.AddIndex(
            model_name="template",
            index=models.Index(fields=["type"], name="templates_type_ccbbc2_idx"),
        ),
        migrations.AddIndex(
            model_name="template",
            index=models.Index(fields=["name"], name="templates_name_061fc9_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="templatevariable",
            unique_together={("template", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="templatesection",
            unique_together={("template", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="templatefootprint",
            unique_together={("template", "name")},
        ),
    ]
